openapi: 3.0.0
servers: []
info:
  title: Digital Strategy Assistant API
  description: This API intended to deploy on aws API Gateway
  version: "1.0.0"
tags:
  - name: User
    description: endpoints accessible by the general public
  - name: Admin
    description: endpoints accessible by admins
x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters": true
    validateRequestBody": false
x-amazon-apigateway-request-validator: params-only
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    statusCode: "401"
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: |
        {"message":$context.error.messageString}
x-common-options: &commonOptions
  options:
    summary: CORS support
    description: |
      Enable CORS by returning correct headers
    responses:
      200:
        $ref: "#/components/responses/Success"
    x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
        application/json: |
          {
            "statusCode" : 200
          }
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          responseTemplates:
            application/json: |
              {}
paths:
  /user/text_generation:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Generate a response from the LLM
      operationId: user_text_generation_POST
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session since multiple sessions can exist within a table
          schema:
            type: string
        - in: query
          name: user_info
          required: false
          description: salted info of the user
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the user's message
                user_role:
                  type: string
                  description: Role of the user
      responses:
        "200":
          description: Response with generated array and input value
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_name:
                    type: string
                    description: Name of the session which becomes the conversation's label
                  llm_output:
                    type: string
                    description: Response generated by the LLM
                  llm_verdict:
                    type: string
                    description: Judgement of the LLM whether the user has achieved mastery over the module
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TextGenLambdaDockerFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

  /user/search:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Semantic search for similar documents
      operationId: user_search_get
      parameters:
        - in: query
          name: user_info
          required: true
          description: salted info of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the user's message
                user_role:
                  type: string
                  description: Role of the user
      responses:
        "200":
          description: Response with generated array and input value
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_name:
                    type: string
                    description: Name of the session which becomes the conversation's label
                  llm_output:
                    type: string
                    description: Response generated by the LLM
                  llm_verdict:
                    type: string
                    description: Judgement of the LLM whether the user has achieved mastery over the module
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchLambdaDockerFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_session:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create a session for a user
      operationId: user_create_session_POST
      parameters:
        - in: query
          name: user_info
          required: true
          description: salted user info
          schema:
            type: string
      responses:
        "200":
          description: Session created
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_feedback:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create feedback for a user
      operationId: user_create_feedback_POST
      parameters:
        - in: query
          name: user_info
          required: true
          description: salted user info
          schema:
            type: string
        - in: query
          name: session_id
          required: true
          description: id of the session
          schema:
            type: string
        - in: query
          name: user_role
          required: true
          description: role of the user
          schema:
            type: string
        - in: query
          name: feedback_rating
          required: true
          description: rating of the feedback
          schema:
            type: string
        - in: query
          name: feedback_description
          required: true
          description: additional details about the feedback
          schema:
            type: string
      responses:
        "200":
          description: feedback created
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/get_messages:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - User
      summary: Get all messages in a session
      operationId: get_messages_GET
      parameters:
        - in: query
          name: session_id
          required: true
          schema:
            type: string
          description: The ID of the session
      responses:
        "200":
          description: List of messages in the session
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: string
                    session_id:
                      type: string
                    user_sent:
                      type: boolean
                    message_content:
                      type: string
                    time_sent:
                      type: string
                      format: date-time
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "session_id query parameter is required"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Session not found"
        "500":
          description: Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMessagesFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

  
  /admin/analytics:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get analytics data
      operationId: admin_get_analytics_GET
      responses:
        "200":
          description: Analytics data retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/conversation_history_preview:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get the 10 most recent message creation engagement types for each role
      operationId: admin_get_conversation_history_preview_GET
      responses:
        "200":
          description: Recent message creations retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/conversation_sessions:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get conversation sessions for a specific user role
      operationId: admin_get_conversation_sessions_GET
      parameters:
        - in: query
          name: user_role
          required: true
          description: The role of the user for which sessions are requested (public, admin)
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved conversation sessions
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/conversation_messages:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get messages for a specific session
      operationId: admin_get_conversation_messages_GET
      parameters:
        - in: query
          name: session_id
          required: true
          description: The ID of the session for which messages are requested
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved messages for the session
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMessagesFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/latest_prompt:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get the latest prompt
      description: Retrieves the most recent entry in the prompts table, including public and admin prompts.
      operationId: admin_get_latest_prompt_GET
      responses:
        "200":
          description: Latest prompt retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  public:
                    type: string
                    description: Public prompt text
                  educator:
                    type: string
                    description: Educator prompt text
                  admin:
                    type: string
                    description: Admin prompt text
                  time_created:
                    type: string
                    format: date-time
                    description: Timestamp of prompt creation
        "404":
          description: No prompts found
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/previous_prompts:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get all previous prompts
      description: Retrieves all previous prompts excluding the most recent one, organized by public, educator, and admin roles, sorted by timestamp from most recent to oldest.
      operationId: admin_get_previous_prompts_GET
      responses:
        "200":
          description: Previous prompts retrieved successfully
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/insert_prompt:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Insert a new prompt for a specific role
      operationId: admin_insert_prompt_POST
      parameters:
        - name: role
          in: query
          required: true
          schema:
            type: string
            enum: [public, educator, admin]
          description: "The role for which the prompt is to be inserted (public, admin)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  description: "The prompt text to insert."
              required:
                - prompt
      responses:
        "201":
          description: Prompt inserted successfully
        "400":
          description: Missing or invalid parameters
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/update_metadata:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Admin
      summary: Update or insert metadata for a document
      operationId: admin_update_metadata_PUT
      parameters:
        - name: category_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: "The ID of the category."
        - name: document_name
          in: query
          required: true
          schema:
            type: string
          description: "The name of the document."
        - name: document_type
          in: query
          required: true
          schema:
            type: string
          description: "The type of the document."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: string
                  description: "The metadata to update for the document."
              required:
                - metadata
      responses:
        "200":
          description: Metadata updated successfully
        "201":
          description: Document metadata added successfully
        "400":
          description: Missing or invalid parameters
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/get_feedback:
      options:
        summary: CORS support
        description: |
          Enable CORS by returning correct headers
        responses:
          200:
            $ref: "#/components/responses/Success"
        x-amazon-apigateway-integration:
          type: mock
          requestTemplates:
            application/json: |
              {
                "statusCode" : 200
              }
          responses:
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'*'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates:
                application/json: |
                  {}
      get:
        tags:
          - Admin
        summary: Get feedback for a particular session
        description: Retrieves all feedback related to a specific session_id
        operationId: admin_get_feedback_GET
        parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session for which feedback are requested
          schema:
            type: string
        responses:
          "200":
            description: feedback retrieved successfully
          "500":
            description: Internal Server Error
        security:
          - adminAuthorizer: []
        x-amazon-apigateway-integration:
          uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
          passthroughBehavior: "when_no_match"
          httpMethod: "POST"
          type: "aws_proxy"
  /admin/feedback_by_role:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get feedback grouped by user roles
      description: Retrieves feedback grouped by user roles (admin, public) with statistics and details.
      operationId: admin_feedback_by_role_GET
      responses:
        "200":
          description: Feedback retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_role:
                      type: string
                      description: The user role (e.g., admin, public, educator).
                    feedback_count:
                      type: integer
                      description: The total number of feedbacks for the role.
                    average_rating:
                      type: number
                      format: float
                      description: The average rating for the feedback in this role.
                    feedback_details:
                      type: array
                      items:
                        type: object
                        properties:
                          feedback_id:
                            type: string
                            description: Unique identifier of the feedback.
                          session_id:
                            type: string
                            description: Session ID associated with the feedback.
                          feedback_rating:
                            type: integer
                            description: Rating provided in the feedback.
                          feedback_description:
                            type: string
                            description: Description of the feedback.
                          feedback_time:
                            type: string
                            format: date-time
                            description: Timestamp of when the feedback was created.
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
   
components:
  securitySchemes:
    adminAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
  responses:
    Success:
      description: Request success
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content: {}